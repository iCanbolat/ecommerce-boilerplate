generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["clientExtensions", "multiSchema"]
  //binaryTargets = ["native"]
  //previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
  //schemas   = ["auth", "public"]
}

enum OrderStatus {
  PREPARING
  SHIPPED
  DELIVERED
}

enum CartItemStatus {
  IN_CART
  REMOVED
  PURCHASED
}

enum UserRoleStatus {
  ADMIN
  CUSTOMER
}

enum ProductStatus {
  DRAFT
  ACTIVE
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  orders        Order[]
  image         String?
  role          UserRoleStatus @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  carts    Cart[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Category {
  id              String            @id @default(cuid())
  name            String
  image           String?
  slug            String
  products        Product[]         @relation("ProductCategories")
  ProductCategory ProductCategory[]

  @@map("categories")
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String?
  slug            String            @unique
  isFeatured      Boolean           @default(false)
  status          ProductStatus     @default(ACTIVE)
  seoTitle        String?
  seoDescription  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  variants        ProductVariant[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  categories      Category[]        @relation("ProductCategories")
  ProductCategory ProductCategory[]

  @@map("products")
}

model ProductVariant {
  id              String          @id @default(cuid())
  productId       String
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantName     String          @default("default")
  variantValues   VariantOption[]
  price           Float           @default(0)
  discountedPrice Float?
  sku             String?
  barcode         String?
  stock           Int             @default(0)
  images          ProductImage[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([productId, variantName])
  @@map("product_variants")
}

model VariantOption {
  id               String         @id @default(cuid())
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name             String
  value            String
  orderItems       OrderItem[]
  cartItems        CartItem[]

  @@unique([productVariantId, name])
  @@map("variant_options")
}

model ProductImage {
  id               String          @id @default(cuid())
  url              String
  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("product_images")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  total       Float
  status      OrderStatus @default(PREPARING)
  addressLine String
  city        String
  state       String
  postalCode  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id              String         @id @default(cuid())
  orderId         String
  order           Order          @relation(fields: [orderId], references: [id])
  productId       String
  product         Product        @relation(fields: [productId], references: [id])
  variantOption   VariantOption? @relation(fields: [variantOptionId], references: [id])
  variantOptionId String?
  quantity        Int
  price           Float

  @@map("order_items")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id              String         @id @default(cuid())
  cartId          String
  cart            Cart           @relation(fields: [cartId], references: [id])
  productId       String
  product         Product        @relation(fields: [productId], references: [id])
  variantOption   VariantOption? @relation(fields: [variantOptionId], references: [id])
  variantOptionId String?
  quantity        Int
  status          CartItemStatus @default(IN_CART)
  history         CartHistory[]

  @@map("cart_items")
}

model CartHistory {
  id         String         @id @default(cuid())
  cartItemId String
  cartItem   CartItem       @relation(fields: [cartItemId], references: [id])
  action     CartItemStatus
  actionDate DateTime       @default(now())

  @@map("cart_history")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}
